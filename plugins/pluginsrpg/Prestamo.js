// plugins/prestamo.js
const fs = require("fs");
const path = require("path");
const { createCanvas, loadImage } = require("canvas");

const MAX_PRESTAMO = 250000; // Tope acumulado por pr√©stamo activo

const handler = async (msg, { conn, args }) => {
  const chatId = msg.key.remoteJid;
  const sender = msg.key.participant || msg.key.remoteJid;
  const numero = (sender || "").replace(/\D/g, "");

  await conn.sendMessage(chatId, { react: { text: "üè¶", key: msg.key } });

  const sukirpgPath = path.join(process.cwd(), "sukirpg.json");
  let db = fs.existsSync(sukirpgPath) ? JSON.parse(fs.readFileSync(sukirpgPath)) : {};
  db.usuarios = Array.isArray(db.usuarios) ? db.usuarios : [];
  db.banco = db.banco || null;

  const usuario = db.usuarios.find(u => u.numero === numero);
  if (!usuario) {
    return conn.sendMessage(chatId, {
      text: "‚ùå No est√°s registrado. Usa `.rpg nombre apellido edad fechaNacimiento` para registrarte.",
      quoted: msg
    });
  }

  if (!db.banco) {
    return conn.sendMessage(chatId, {
      text: "üè¶ No hay banco configurado. Un owner debe usar `.addbank`.",
      quoted: msg
    });
  }

  if (!args[0]) {
    return conn.sendMessage(chatId, {
      text: "‚ú≥Ô∏è *Uso correcto:*\n.prestamo <cantidad>\nüìå Ej: `.prestamo 5000`",
      quoted: msg
    });
  }

  const cantidad = parseInt(args[0], 10);
  if (isNaN(cantidad) || cantidad <= 0) {
    return conn.sendMessage(chatId, { text: "‚ùå La cantidad debe ser un n√∫mero mayor que 0.", quoted: msg });
  }

  const capitalDisponible = typeof db.banco.montoTotal === "number" ? db.banco.montoTotal : 0;
  if (cantidad > capitalDisponible) {
    return conn.sendMessage(chatId, {
      text: `‚ùå El banco solo tiene *${capitalDisponible}* cr√©ditos disponibles.`,
      quoted: msg
    });
  }

  const tasaInteres = (typeof db.banco.tasaInteres === "number" ? db.banco.tasaInteres : 0.20);
  const plazoMs = (db.banco.plazo && typeof db.banco.plazo.ms === "number")
    ? db.banco.plazo.ms
    : (typeof db.banco.tiempoLimite === "number" ? db.banco.tiempoLimite : 0);

  if (!plazoMs || plazoMs <= 0) {
    return conn.sendMessage(chatId, {
      text: "‚ùå El banco no tiene un plazo v√°lido. Reconfigura con `.addbank <monto> <tiempo>`.",
      quoted: msg
    });
  }

  // Buscar pr√©stamo ACTIVO del usuario
  db.banco.prestamos = Array.isArray(db.banco.prestamos) ? db.banco.prestamos : [];
  let prestamoActivo = db.banco.prestamos.find(p => p.numero === numero && p.estado === "activo");

  // ====== VALIDACI√ìN DEL TOPE ACUMULADO (250k) ======
  if (prestamoActivo) {
    const yaSolicitado = Number(prestamoActivo.cantidadSolicitada || 0);
    const nuevoTotal = yaSolicitado + cantidad;
    if (nuevoTotal > MAX_PRESTAMO) {
      const restante = Math.max(0, MAX_PRESTAMO - yaSolicitado);
      return conn.sendMessage(chatId, {
        text:
`üö´ *Tope de pr√©stamo alcanzado.*
üßÆ Ya tienes solicitado: *${yaSolicitado}* cr√©ditos.
üîù M√°ximo permitido por pr√©stamo: *${MAX_PRESTAMO}* cr√©ditos.
${restante > 0 ? `üëâ A√∫n puedes solicitar hasta *${restante}* cr√©ditos.` : "üëâ Debes cancelar tu deuda para volver a pedir."}`,
        quoted: msg
      });
    }
  } else {
    // Si es un pr√©stamo nuevo, no se puede pedir m√°s del tope en una sola vez
    if (cantidad > MAX_PRESTAMO) {
      return conn.sendMessage(chatId, {
        text: `üö´ No puedes solicitar m√°s de *${MAX_PRESTAMO}* cr√©ditos en un solo pr√©stamo.`,
        quoted: msg
      });
    }
  }
  // ====== FIN VALIDACI√ìN TOPE ======

  const ahora = Date.now();

  // Cr√©dito neto que recibe el usuario (siempre la cantidad solicitada)
  usuario.creditos = (usuario.creditos || 0) + cantidad;
  db.banco.montoTotal = capitalDisponible - cantidad;

  // Costo total de ESTA solicitud (principal + inter√©s)
  const extraConInteres = Math.ceil(cantidad * (1 + tasaInteres));

  if (prestamoActivo) {
    // === AMPLIACI√ìN DEL PR√âSTAMO EXISTENTE ===
    prestamoActivo.cantidadSolicitada = (prestamoActivo.cantidadSolicitada || 0) + cantidad;
    prestamoActivo.totalAPagar       = (prestamoActivo.totalAPagar || 0) + extraConInteres;
    prestamoActivo.pendiente         = (prestamoActivo.pendiente || 0) + extraConInteres;

    // Mantengo fechaLimite igual (no se reinicia el plazo)
    prestamoActivo.historial = Array.isArray(prestamoActivo.historial) ? prestamoActivo.historial : [];
    prestamoActivo.historial.push({
      fecha: ahora,
      tipo: "ampliacion",
      solicitado: cantidad,
      extraAPagar: extraConInteres
    });

    fs.writeFileSync(sukirpgPath, JSON.stringify(db, null, 2));

    // Comprobante visual de AMPLIACI√ìN (Canvas)
    try {
      const canvas = createCanvas(800, 500);
      const ctx = canvas.getContext("2d");

      ctx.fillStyle = "#fff";
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      const logo = await loadImage("https://cdn.russellxz.click/f44a9e20.jpeg");
      ctx.save();
      ctx.beginPath();
      ctx.arc(80, 80, 60, 0, Math.PI * 2);
      ctx.closePath();
      ctx.clip();
      ctx.drawImage(logo, 20, 20, 120, 120);
      ctx.restore();

      ctx.fillStyle = "#000";
      ctx.font = "bold 30px Sans-serif";
      ctx.fillText("¬•AMPLIACI√ìN DE PR√âSTAMO", 220, 60);

      ctx.font = "20px Sans-serif";
      ctx.fillText(`‚û§ Cliente: ${usuario.nombre} ${usuario.apellido}`, 220, 120);
      ctx.fillText(`‚û§ Nueva cantidad: ${cantidad} cr√©ditos`, 220, 160);
      ctx.fillText(`‚û§ Inter√©s: ${(tasaInteres * 100).toFixed(0)}%`, 220, 200);
      ctx.fillText(`‚û§ Extra a pagar: ${extraConInteres} cr√©ditos`, 220, 230);
      ctx.fillText(`‚û§ Pendiente total: ${prestamoActivo.pendiente} cr√©ditos`, 220, 260);
      ctx.fillText(`‚û§ Fecha l√≠mite (sin cambios): ${new Date(prestamoActivo.fechaLimite).toLocaleString()}`, 220, 290);

      ctx.fillText(`‚ö† Si no pagas a tiempo, perder√°s tu personaje principal`, 220, 330);
      ctx.fillText(`   o, si no tienes, una de tus mascotas ser√° eliminada.`, 220, 355);

      ctx.fillStyle = "#10b981";
      ctx.font = "bold 36px Sans-serif";
      ctx.fillText("‚úî AMPLIACI√ìN APLICADA", 210, 420);

      const buffer = canvas.toBuffer("image/png");
      await conn.sendMessage(chatId, {
        image: buffer,
        caption:
          `üßæ *Ampliaci√≥n de pr√©stamo aplicada*\n` +
          `üí∞ +${cantidad} cr√©ditos depositados.\n` +
          `‚ûï Se suman *${extraConInteres}* cr√©ditos a tu deuda (inter√©s ${Math.round(tasaInteres * 100)}%).\n` +
          `üßÆ *Pendiente total ahora:* ${prestamoActivo.pendiente} cr√©ditos.\n` +
          `‚è≥ *Vence:* ${new Date(prestamoActivo.fechaLimite).toLocaleString()}\n\n` +
          `üìå Para pagar, usa: *.pagarall*`,
        quoted: msg
      });
    } catch {
      await conn.sendMessage(chatId, {
        text:
          `üßæ *Ampliaci√≥n de pr√©stamo aplicada*\n` +
          `Cliente: *${usuario.nombre} ${usuario.apellido}*\n` +
          `Nueva cantidad: *${cantidad}* cr√©ditos\n` +
          `Extra a pagar (con inter√©s): *${extraConInteres}* cr√©ditos\n` +
          `Pendiente total ahora: *${prestamoActivo.pendiente}* cr√©ditos\n` +
          `Vence: *${new Date(prestamoActivo.fechaLimite).toLocaleString()}*\n\n` +
          `üìå Para pagar, usa: *.pagarall*`,
        quoted: msg
      });
    }

  } else {
    // === NUEVO PR√âSTAMO ===
    const fechaInicio = ahora;
    const fechaLimite = fechaInicio + plazoMs;

    const prestamo = {
      id: `${numero}_${fechaInicio}`,
      numero,
      nombre: usuario.nombre,
      apellido: usuario.apellido,
      cantidadSolicitada: cantidad,
      tasa: tasaInteres,
      totalAPagar: extraConInteres,
      pagado: 0,
      pendiente: extraConInteres,
      fechaInicio,
      fechaLimite,
      grupo: chatId,
      estado: "activo",
      historial: [
        { fecha: ahora, tipo: "aprobado", solicitado: cantidad, totalAPagar: extraConInteres }
      ],
      snapshot: {
        creditos: usuario.creditos || 0,
        guardado: usuario.guardado || 0
      }
    };
    db.banco.prestamos.push(prestamo);
    fs.writeFileSync(sukirpgPath, JSON.stringify(db, null, 2));

    try {
      const canvas = createCanvas(800, 500);
      const ctx = canvas.getContext("2d");

      ctx.fillStyle = "#fff";
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      const logo = await loadImage("https://cdn.russellxz.click/f44a9e20.jpeg");
      ctx.save();
      ctx.beginPath();
      ctx.arc(80, 80, 60, 0, Math.PI * 2);
      ctx.closePath();
      ctx.clip();
      ctx.drawImage(logo, 20, 20, 120, 120);
      ctx.restore();

      ctx.fillStyle = "#000";
      ctx.font = "bold 30px Sans-serif";
      ctx.fillText("¬•FACTURA DE PR√âSTAMO", 220, 60);

      ctx.font = "20px Sans-serif";
      ctx.fillText(`‚û§ Cliente: ${usuario.nombre} ${usuario.apellido}`, 220, 120);
      ctx.fillText(`‚û§ Cantidad prestada: ${cantidad} cr√©ditos`, 220, 160);
      ctx.fillText(`‚û§ Inter√©s: ${(tasaInteres * 100).toFixed(0)}%`, 220, 200);
      ctx.fillText(`‚û§ Total a pagar: ${extraConInteres} cr√©ditos`, 220, 230);
      ctx.fillText(`‚û§ Fecha de inicio: ${new Date(fechaInicio).toLocaleString()}`, 220, 260);
      ctx.fillText(`‚û§ Fecha l√≠mite de pago: ${new Date(fechaLimite).toLocaleString()}`, 220, 290);

      ctx.fillText(`‚ö† Si no pagas a tiempo, perder√°s tu personaje principal`, 220, 330);
      ctx.fillText(`   o, si no tienes, una de tus mascotas ser√° eliminada.`, 220, 355);

      ctx.fillStyle = "#28a745";
      ctx.font = "bold 40px Sans-serif";
      ctx.fillText("‚úî PR√âSTAMO APROBADO", 200, 420);

      const buffer = canvas.toBuffer("image/png");
      await conn.sendMessage(chatId, {
        image: buffer,
        caption:
          `‚úÖ *Pr√©stamo aprobado*\n` +
          `üí≥ Se han depositado *${cantidad}* cr√©ditos.\n` +
          `üßÆ Total a pagar (inter√©s ${Math.round(tasaInteres * 100)}%): *${extraConInteres}*.\n\n` +
          `üìå Para pagar: *.pagarall*`,
        quoted: msg
      });
    } catch {
      await conn.sendMessage(chatId, {
        text:
          `‚úÖ *Pr√©stamo aprobado*\n` +
          `Cliente: *${usuario.nombre} ${usuario.apellido}*\n` +
          `Monto: *${cantidad}* cr√©ditos\n` +
          `Inter√©s: *${Math.round(tasaInteres * 100)}%*\n` +
          `Total a pagar: *${extraConInteres}* cr√©ditos\n` +
          `Inicio: *${new Date(ahora).toLocaleString()}*\n` +
          `Vence: *${new Date(ahora + plazoMs).toLocaleString()}*\n\n` +
          `üìå Para pagar: *.pagarall*`,
        quoted: msg
      });
    }
  }

  await conn.sendMessage(chatId, { react: { text: "‚úÖ", key: msg.key } });
};

handler.command = ["prestamo"];
module.exports = handler;
